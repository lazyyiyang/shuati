'''
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

【思路】：由于首尾相连，要么偷nums[1:]，要么偷nums[:-1]，即首尾不能同时偷，返回两种情况中的最大值
动态规划基于打家劫舍1
'''
class Solution:
    def rob(self, nums: List[int]) -> int:
        if not nums: return 0
        if len(nums)==1: return nums[0]
        n=len(nums)
        def helper(l):
            dp=[0]*n # 状态列表
            dp[1]=l[0]
            for i in range(2,n):
                dp[i]=max(dp[i-1],dp[i-2]+l[i-1]) # 状态转移方程
            return dp[-1]
        return max(helper(nums[1:]),helper(nums[:-1]))