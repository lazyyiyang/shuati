# 192 打家劫舍
'''
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
'''
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums)<1: return 0
        if len(nums)<3: return max(nums) # 状态转移公式
        a,b=nums[0],max(nums[0],nums[1]) #a=f(k-2),b=f(k-1)
        for i in range(2,len(nums)):	 #f(k)=max(f(k-2)+nums[k],f(k-1))
            r=max(b,a+nums[i])
            a,b=b,r
        return r

'''
动态规划问题
寻找子问题 要求f(n) 思考f(k)怎么解（如何用f(k-1),f(k-2)...解决)
本题要求偷n间房最大收益： 
即为偷n-1间房收益 以及n-2间房+最后一间房 两者中大的那个
于是可以得到状态转移方程
''' 